;;;; Emacs Bookmark Format Version 1 ;;;; -*- coding: utf-8-emacs -*- 
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("(let ((content (my-org-macro-replace-all-in-string (buffer-string) templates)))"
 (filename . "~/projects/lightcorn/docs/lisp/org-config.el")
 (front-context-string . "g (buffer-string")
 (rear-context-string . "ace-all-in-strin")
 (position . 7951))
("Handle C stack overflow caused by too nested Lisp evaluation."
 (filename . "~/portless/emacs/src/ChangeLog.13")
 (front-context-string . "	Handle C stack ")
 (rear-context-string . "pov@yandex.ru>\n\n")
 (position . 185174))
("nameserver 10.124.0.2"
 (filename .
           #("/sudo:root@f28:/etc/resolv.conf" 6 10
             (tramp-default t)))
 (front-context-string . "nameserver 10.12")
 (rear-context-string . " NetworkManager\n")
 (position . 31))
("You can explicitly tell Emacs to make another backup file from a"
 (front-context-string . "You can explicit")
 (rear-context-string . "directory’.\n\n   ")
 (position . 467794)
 (filename . "/usr/local/share/info/emacs")
 (info-node . "Backup")
 (handler . Info-bookmark-jump))
("(add-hook 'window-size-change-functions 'elscreen-frame-change-size-hook)"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "(add-hook 'windo")
 (rear-context-string . "hange-functions\n")
 (position . 60026))
("** Simple request-response session - full example"
 (filename . "~/projects/lightcorn/docs/flow.org")
 (front-context-string . "** Simple reques")
 (rear-context-string . "n the request.\n\n")
 (position . 5913))
("\"Find first wrapper with trigger KEY that should be active in MAJOR-MODE.\""
 (filename . "~/.emacs.d/forked-plugins/wrap-region/wrap-region.el")
 (front-context-string . "first wrapper wi")
 (rear-context-string . "d (key)\n  \"Find ")
 (position . 5384))
("(defun wrap-region-define-wrappers ()"
 (filename . "~/.emacs.d/forked-plugins/wrap-region/wrap-region.el")
 (front-context-string . "ppers ()\n  \"Defi")
 (rear-context-string . "egion-define-wra")
 (position . 11157))
("(defun elscreen-frame-change-size-hook (f)"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "screen-frame-cha")
 (rear-context-string . "w))))\n\n(defun el")
 (position . 59877))
("‘no-delete-other-windows’"
 (front-context-string . "delete-other-win")
 (rear-context-string . "indows::).\n\n‘no-")
 (position . 1973359)
 (filename . "/usr/local/share/info/elisp")
 (info-node . "Window Parameters")
 (handler . Info-bookmark-jump))
("not delete any window whose ‘no-delete-other-windows’ parameter is"
 (front-context-string . "-delete-other-wi")
 (rear-context-string . "window whose ‘no")
 (position . 1817547)
 (filename . "/usr/local/share/info/elisp")
 (info-node . "Deleting Windows")
 (handler . Info-bookmark-jump))
("(defun elscreen-make-frame-confs (frame &optional keep-window-configuration)"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "al keep-window-c")
 (rear-context-string . "s (frame &option")
 (position . 16174))
("(defun elscreen-e21-tab-update (&optional force)"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "optional force)\n")
 (rear-context-string . "21-tab-update (&")
 (position . 59833))
("(defvar elscreen-screen-update-hook nil)"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "te-hook nil)\n(de")
 (rear-context-string . "reen-screen-upda")
 (position . 21961))
("(defconst elscreen-control-tab"
 (filename . "~/.emacs.d/plugins2/elscreen/elscreen.el")
 (front-context-string . "screen-control-t")
 (rear-context-string . "))\n\n(defconst el")
 (position . 58319))
("(let ((name (s-trim"
 (filename . "~/.emacs.d/config/my-generic-ui-config.el")
 (front-context-string . "\n               ")
 (rear-context-string . "t ((name (s-trim")
 (position . 6540))
)